{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Python Unittest": {
      "prefix": "unittest",
      "body": [
        "import unittest",
        "",
        "",
        "class SomeTestCase(unittest.TestCase):",
        "	def tearDown(self):",
        "		pass",
        "",
        "	def setUp(self):",
        "		pass",
        "",
        "	def test_some(self):",
        "		assert True"
      ],
      "description": "Python unittest snippet"
    },
    "Python coding utf8": {
      "prefix": "coding",
      "body": ["# -*- coding: utf-8 -*-"],
      "description": "Python Coding utf8"
    },
    "Python Function Decorator": {
      "prefix": "deco",
      "body": [
        "import functools",
        "",
        "def decorator(func):",
        "    @functools.wraps(func)",
        "    def wrapper(*args, **kwargs):",
        "	       return func(*args, **kwargs)",
        "",
        "    return wrapper"
      ],
      "description": "Python Function decorator"
    },
    "Python Logging": {
      "prefix": "logging",
      "body": [
        "import logging",
        "",
        "log = logging.getLogger(\"app\")",
        "log.addHandler(logging.StreamHandler())",
        "log.setLevel(logging.INFO)"
      ],
      "description": "Python Logging"
    },
    "Python File Logging": {
      "prefix": "file_logging",
      "body": [
        "import logging",
        "",
        "log = logging.getLogger(\"app.main\")",
        "handler = logging.StreamHandler()",
        "file_handler = logging.FileHandler(\"avscrap.log\")",
        "formatter = logging.Formatter(\"[%(asctime)s:%(levelname)s] %(message)s\")",
        "file_handler.setFormatter(formatter)",
        "log.setLevel(logging.INFO)",
        "log.addHandler(handler)",
        "log.addHandler(file_handler)"
      ],
      "description": "Python Logging"
    }
  }
  