{
  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Python Unittest": {
    "prefix": "unittest",
    "body": [
      "import unittest",
      "",
      "",
      "class SomeTestCase(unittest.TestCase):",
      "	def tearDown(self):",
      "		pass",
      "",
      "	def setUp(self):",
      "		pass",
      "",
      "	def test_some(self):",
      "		assert True"
    ],
    "description": "Python unittest snippet"
  },
  "Python coding utf8": {
    "prefix": "coding",
    "body": ["# -*- coding: utf-8 -*-"],
    "description": "Python Coding utf8"
  },
  "Python Function Decorator": {
    "prefix": "deco",
    "body": [
      "import functools",
      "",
      "def decorator(func):",
      "    @functools.wraps(func)",
      "    def wrapper(*args, **kwargs):",
      "	       return func(*args, **kwargs)",
      "",
      "    return wrapper"
    ],
    "description": "Python Function decorator"
  },
  "Python Logging": {
    "prefix": "logging",
    "body": [
      "import logging",
      "",
      "log = logging.getLogger(\"app\")",
      "log.addHandler(logging.StreamHandler())",
      "log.setLevel(logging.INFO)"
    ],
    "description": "Python Logging"
  },
  "Python File Logging": {
    "prefix": "file_logging",
    "body": [
      "import logging",
      "",
      "log = logging.getLogger(\"app.main\")",
      "handler = logging.StreamHandler()",
      "file_handler = logging.FileHandler(\"avscrap.log\")",
      "formatter = logging.Formatter(\"[%(asctime)s:%(levelname)s] %(message)s\")",
      "file_handler.setFormatter(formatter)",
      "log.setLevel(logging.INFO)",
      "log.addHandler(handler)",
      "log.addHandler(file_handler)"
    ],
    "description": "Python Logging"
  },
  "docstring": {
    "prefix": "docstring",
    "body":[
      "\"\"\"A one line summary of the module or program, terminated by a period.",
      "",
      "Leave one blank line.  The rest of this docstring should contain an",
      "overall description of the module or program.  Optionally, it may also",
      "contain a brief description of exported classes and functions and/or usage",
      "examples.",
      "",
      "  Typical usage example:",
      "",
      "  foo = ClassFoo()",
      "  bar = foo.FunctionBar()",
      "\"\"\""
    ],
    "module docstring google python coding style guide."
  },
  "funcdocstring": {
    "prefix": "funcdocstring",
    "body":[
      "\"\"\"Fetches rows from a Smalltable.",
      "",
      "Retrieves rows pertaining to the given keys from the Table instance",
      "represented by table_handle.  String keys will be UTF-8 encoded.",
      "",
      "Args:",
      "  table_handle:",
      "    An open smalltable.Table instance.",
      "  keys:",
      "    A sequence of strings representing the key of each table row to",
      "    fetch.  String keys will be UTF-8 encoded.",
      "  require_all_keys:",
      "    Optional; If require_all_keys is True only rows with values set",
      "    for all keys will be returned.",
      "",
      "Returns:",
      "  A dict mapping keys to the corresponding table row data",
      "  fetched. Each row is represented as a tuple of strings. For",
      "  example:",
      "",
      "  {b'Serak': ('Rigel VII', 'Preparer'),",
      "    b'Zim': ('Irk', 'Invader'),",
      "    b'Lrrr': ('Omicron Persei 8', 'Emperor')}",
      "",
      "  Returned keys are always bytes.  If a key from the keys argument is",
      "  missing from the dictionary, then that row was not found in the",
      "  table (and require_all_keys must have been False).",
      "",
      "Raises:",
      "  IOError: An error occurred accessing the smalltable.",
      "\"\"\""
    ],
    "function docstring google python coding style guide."
  },
  "classdocstring": {
    "prefix": "classdocstring",
    "body":[
      "\"\"\"Summary of class here.",
      "",
      "Longer class information....",
      "Longer class information....",
      "",
      "Attributes:",
      "    likes_spam: A boolean indicating if we like SPAM or not.",
      "    eggs: An integer count of the eggs we have laid.",
      "\"\"\"",
    ],
    "module docstring google python coding style guide."
  },
}
